# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nuDiuV9DgVKAERSbF5BDAA7EuFvUFSbp
"""

import re
import os
import shutil
from pathlib import Path
from torchvision import transforms, datasets, models
import numpy as np
from PIL import Image

def shut_file_preds(image_file, preds_class, class_model, old_dir=False):
  if class_model == 'many':
    class_dir = ['SOE', 'caskad', 'ce2726', 'energomera', 'heba', 'len_electro',
       'matrix', 'mercury_200.02', 'mercury_any', 'other', 'trash']
  elif self.class_model == 'one':
    class_dir = ['SOLO', 'c0_446', 'co505', 'co_any', 'coe', 'ekf', 'energomera',
       'leneltktro', 'mercury_201', 'mercury_201.7', 'mercury_202.5',
       'mercury_any', 'neva_101_1s0', 'neva_103_1s0', 'other', 'seo',
       'trash']
  os.mkdir('data_new')
  for i in class_dir:
    os.mkdir('data_new/'+i)
  for path, model_class in zip(image_file, preds_class):
    if old_dir != False:
      path = Path(old_dir + path.name)
    shutil.copyfile(path, f'data_new/{model_class}/{path.name}')
  DIR = Path('data_new')
  image_file = list(sorted(DIR.rglob('*.jpg')))
  print('Перемещено: ', len(image_file))

def shut_file_old_dir(old_dir, class_dir):
  DIR = Path(class_dir)
  image_file = list(sorted(DIR.rglob('*.jpg')))
  os.mkdir('data_new')
  for i in os.listdir(class_dir):
    os.mkdir('data_new/'+i)
  print('Было файлов:',len(image_file))
  for path in image_file:
    clas = path.parts[-2] + '/'
    try:
      shutil.move(old_dir+path.name, 'data_new/'+clas+path.name)
    except FileNotFoundError:
      #print(old_dir+path.name)
      pass
  DIR = Path('data_new')
  image_file = list(sorted(DIR.rglob('*.jpg')))
  print('Перемещено: ', len(image_file))

def image_new_low(DIR):
  
  def save_image(image_file, i=''):
    for path_image in image_file:
      image = Image.open(path_image)
      image = np.array(image)
      try:
        new_image = transform(image)
        new_image.save(new_dir+i+'/'+path_image.name)
      except ValueError:
        print(path_image)

  transform = transforms.Compose([
  transforms.ToPILImage(mode="RGB"),
  transforms.Resize((460, 460))])

  new_dir = 'Models_low_l/'
  os.mkdir(new_dir)
  list_DIR = os.listdir(DIR)
  if len(list_DIR) < 30:
    for i in list_DIR:
      os.mkdir(new_dir+i)
      old_dir = Path(DIR+i)
      image_file = sorted(list(old_dir.rglob('*.*')))
      save_image(image_file, i)
  else:
    old_dir = Path(DIR)
    image_file = sorted(list(old_dir.rglob('*.*')))
    save_image(image_file)

def zip_to_backet(DIR, name, tarif):
  models = ['o_tarif', 'm_tarif']
  assert sum([True  for  i in models if tarif == i])
  try:
    os.mkdir('zip')
  except FileExistsError:
    pass
  for path in os.listdir(DIR):
    len_dir = len(os.listdir(DIR+'/'+path))
    os.system(f'zip -9 "zip/{path}&_{len_dir}_{name}.zip" "{DIR}/{path}/"* ')
    backet = re.split('&', path)[0]
    os.system(f'gsutil -m cp -r "zip/{path}&_{len_dir}_{name}.zip" "gs://toloka-main/models_by_class/tarif/{backet}" ')
    print(f'Отправлен zip/{path}&_{len_dir}_{name}.zip в gs://toloka-main/models_by_class/o_tarif/{backet}')
